---
title: "Project 3 Workbook"
subtitle: "Course DS 250"
author: "Brother Clark"
uses: quarto-dev/quarto-actions/publish@v2
with:
  target: gh-pages
  to: html # If set, it will be equivalent to `quarto render --to html`
  path: source-folder # By default, the current working dir is used i.e `quarto render .`
#jupyter: python3
format: #hugo-md
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-copy: true
    code-fold: true
    code-line-numbers: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-tools:
        source: false
        toggle: true
        caption: See code
execute:
    warning: false
    
---


# Project 3 WorkBook


## Tutoring Lab Info
The [data science lab](https://byuidatascience.github.io/lab/) is a resource you can use in person, online, and in Slack.

---

# SQL Query and Data Retrieval

---


### 1. ` sqlite3.connect()`

:::{.callout-tip collapse="true" title="Connect to Database"}

The `sqlite3.connect()` function establishes a connection to an SQLite database file. In this example, the file named 'lahmansbaseballdb.sqlite' is being connected to. `Use Relative Path` meaning this sqlite file is in the same directory as the file you are working with. This will ensure a connection when using `sqlite3`.



:::

```{.python filename="Code Snippet"}
import sqlite3

con = sqlite3.connect('*\lahmansbaseballdb.sqlite')

```



### 2. `SELECT/FROM`

:::{.callout-tip collapse="true" title="SELECT/FROM Statement Explanation"}

The `SELECT` statement is used to retrieve data from one or more tables in a database. It specifies which columns to include in the result set. The `FROM` clause specifies the table or tables from which to retrieve data. It forms the foundation of the `SELECT` statement.

:::



```{.python filename="Code Snippet"}

p = """

SELECT column1, column2
FROM table_name

"""

pd.read_sql_query(p, con)

```



### 3. `WHERE`

:::{.callout-tip collapse="true" title="WHERE Clause Explanation"}

In SQL, when using the `WHERE` clause, logical symbols are commonly employed to specify conditions based on column values. These symbols help define the relationship between a column's value and the desired condition.

:::


```{.python filename="Code Snippet"}

p = """

SELECT column1, column2
FROM table_name
WHERE column1 = 'value'


"""

pd.read_sql_query(p, con)

```


```{.python filename="Code Snippet"}

p = """

SELECT column1, column2
FROM table_name
WHERE column1 <> 'value'


"""

pd.read_sql_query(p, con)

```


```{.python filename="Code Snippet"}

p = """

SELECT column1, column2
FROM table_name
WHERE column1 > value



"""

pd.read_sql_query(p, con)

```



```{.python filename="Code Snippet"}

p = """

SELECT column1, column2
FROM table_name
WHERE column1 < value



"""

pd.read_sql_query(p, con)

```





### 5. `ORDER BY`

:::{.callout-tip collapse="true" title="ORDER BY Clause Explanation"}

The default order for the `ORDER BY` clause is ascending `(ASC)`. `ASC` sorts from the lowest value to the highest value. `DESC` sorts from the highest value to the lowest value.

:::


```{.python filename="Code Snippet"}

p = """

SELECT column1, column2
FROM table_name
ORDER BY column1 DESC

"""

pd.read_sql_query(p, con)


```


```{.python filename="Code Snippet"}

p = """

SELECT column1, column2
FROM table_name
ORDER BY column1 ASC

"""

pd.read_sql_query(p, con)


```



### 7. `ALIAS`

:::{.callout-tip collapse="true" title="Alias Explanation"}

An alias is a temporary name assigned to a table or column in a SQL query. It can be used to make the output more readable or to shorten lengthy column names.

:::


```{.python filename="Code Snippet"}

p = """

SELECT column1 AS alias_name
FROM table_name

"""

pd.read_sql_query(p, con)

```


### 6. `CAST`

:::{.callout-tip collapse="true" title="CAST Function Explanation"}

The `CAST` function is used to convert data from one data type to another. It is particularly useful for performing calculations or comparisons on data of different types.

:::


```{.python filename="Code Snippet"}

p = """

SELECT CAST(column_name AS new_data_type) AS new_column_name
FROM table_name


"""

pd.read_sql_query(p, con)

```






### 8. `HAVING`


:::{.callout-tip collapse="true" title="HAVING Clause Explanation"}

The `HAVING` clause is used to filter rows in a result set based on a specified condition. It is similar to the `WHERE` clause but is used with aggregate functions in `GROUP BY` queries.

:::




```{.python filename="Code Snippet"}


p = """

SELECT column1, aggregate_function(column2)
FROM table_name
GROUP BY column1
HAVING aggregate_function(column2) > value

"""


pd.read_sql_query(p, con)

```



### 9. `LIMIT`

:::{.callout-tip collapse="true" title="LIMIT Clause Explanation"}

The `LIMIT` clause is used to limit the number of rows returned in a result set. It is often used in combination with the `ORDER BY` clause to retrieve a specific number of top or bottom records.

:::



```{.python filename="Code Snippet"}

p = """

SELECT column1, column2
FROM table_name
LIMIT 10

"""

pd.read_sql_query(p , con)

```



### 10. `GROUP BY`

:::{.callout-tip collapse="true" title="GROUP BY Clause Explanation"}

The `GROUP BY` clause is used to group rows in a result set based on one or more columns. It is typically used with aggregate functions to perform calculations on grouped data.

:::


```{.python filename="Code Snippet"}

q = """

SELECT column1, aggregate_function(column2)
FROM table_name
GROUP BY column1


"""

pd.read_sql_query(q, con)

```





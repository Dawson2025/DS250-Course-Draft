{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Project 2 Workbook\"\n",
        "subtitle: \"Course DS 250\"\n",
        "author: \"Brother Clark\"\n",
        "uses: quarto-dev/quarto-actions/publish@v2\n",
        "with:\n",
        "  target: gh-pages\n",
        "  to: html # If set, it will be equivalent to `quarto render --to html`\n",
        "  path: source-folder # By default, the current working dir is used i.e `quarto render .`\n",
        "#jupyter: python3\n",
        "format: #hugo-md\n",
        "  html:\n",
        "    self-contained: true\n",
        "    page-layout: full\n",
        "    title-block-banner: true\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    toc-location: body\n",
        "    number-sections: false\n",
        "    html-math-method: katex\n",
        "    code-copy: true\n",
        "    code-fold: true\n",
        "    code-line-numbers: true\n",
        "    code-summary: \"Show the code\"\n",
        "    code-overflow: wrap\n",
        "    code-tools:\n",
        "        source: false\n",
        "        toggle: true\n",
        "        caption: See code\n",
        "execute:\n",
        "    warning: false\n",
        "    \n",
        "---\n",
        "\n",
        "\n",
        "# Project 2 WorkBook\n",
        "\n",
        "\n",
        "## Tutoring Lab Info\n",
        "The [data science lab](https://byuidatascience.github.io/lab/) is a resource you can use in person, online, and in Slack.\n",
        "\n",
        "---\n",
        "\n",
        "# Data Manipulation\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "### 1. `replace()` function\n",
        "\n",
        ":::{.callout-tip collapse=\"true\" title=\"Replace Function Explanation\"}\n",
        "\n",
        "The `replace()` function is used to substitute specified values in a DataFrame or Series, facilitating data cleaning and transformation by exchanging specific values with desired ones. In the example, `old_value` denotes the value to be replaced, and `new_value` signifies the replacement value. The presence of `inplace=True` ensures that the modification is applied directly to the DataFrame.\n",
        "\n",
        ":::\n",
        "\n",
        "```{.python filename=\"Code Snippet\"}\n",
        "df['column_name'].replace(old_value, new_value, inplace=True)\n",
        "```\n",
        "\n",
        "\n",
        "### 2. `min()` function\n",
        "\n",
        ":::{.callout-tip collapse=\"true\" title=\"Min Function Explanation\"}\n",
        "\n",
        "The `min()` function is employed to determine the minimum value in a DataFrame or Series. It is particularly useful for extracting the smallest element from a numerical dataset.\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "```{.python filename=\"Code Snippet\"}\n",
        "min_value = df['column_name'].min()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "### 3. `max()` function\n",
        "\n",
        ":::{.callout-tip collapse=\"true\" title=\"Max Function Explanation\"}\n",
        "\n",
        "The `max()` function is utilized to find the maximum value in a DataFrame or Series. This function is handy for retrieving the largest element from a numerical dataset.\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "```{.python filename=\"Code Snippet\"}\n",
        "max_value = df['column_name'].max()\n",
        "```\n",
        "\n",
        "\n",
        "### 4. `groupby()` function\n",
        "\n",
        ":::{.callout-tip collapse=\"true\" title=\"Groupby Function Explanation\"}\n",
        "\n",
        "The `groupby()` function is applied to split the data into groups based on some criteria. It is often used in conjunction with aggregate functions like `sum()` to perform operations on each group independently.\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "```{.python filename=\"Code Snippet\"}\n",
        "grouped_data = df.groupby('grouping_column').sum()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "### 5. `sum()` function\n",
        "\n",
        ":::{.callout-tip collapse=\"true\" title=\"Sum Function Explanation\"}\n",
        "\n",
        "The `sum()` function is used to calculate the sum of values in a DataFrame or Series. It is commonly employed with the `groupby()` function to find the total of specific groups in the data.\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "```{.python filename=\"Code Snippet\"}\n",
        "sum_result = df['column_name'].sum()\n",
        "```\n",
        "\n",
        "\n",
        "### 6. `index` attribute\n",
        "\n",
        ":::{.callout-tip collapse=\"true\" title=\"Index Function Explanation\"}\n",
        "\n",
        "The `index` attribute is employed to access the index (row labels) of a DataFrame. It is useful for extracting information related to the row labels and their positions.\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "```{.python filename=\"Code Snippet\"}\n",
        "index_values = df.index\n",
        "```\n",
        "\n",
        "\n",
        "### 7. `round()` function\n",
        "\n",
        ":::{.callout-tip collapse=\"true\" title=\"Round Function Explanation\"}\n",
        "\n",
        "The `round()` function is utilized to round off numeric values to a specified number of decimal places. It is helpful for controlling the precision of numerical data in a DataFrame.\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "```{.python filename=\"Code Snippet\"}\n",
        "rounded_values = df['column_name'].round(decimals=2)\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "### 8. Indexing a String\n",
        "\n",
        "\n",
        ":::{.callout-tip collapse=\"true\" title=\"Indexing a String Explanation\"}\n",
        "\n",
        "To index a string in a DataFrame, the square brackets `[]` are used along with the column name containing the string data. This allows for accessing and manipulating specific characters or substrings within the string.\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{.python filename=\"Code Snippet\"}\n",
        "string_value = df['string_column'][index]\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "### 9. `to_json()` function\n",
        "\n",
        ":::{.callout-tip collapse=\"true\" title=\"To JSON Function Explanation\"}\n",
        "\n",
        "The `to_json()` function is employed to convert a DataFrame to its JSON representation. The `orient` parameter determines the format of the JSON output, such as 'split', 'records', 'index', etc.\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "```{.python filename=\"Code Snippet\"}\n",
        "json_representation = df.to_json(orient='records')\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "### 10. `isin()` function\n",
        "\n",
        ":::{.callout-tip collapse=\"true\" title=\"Isin Function Explanation\"}\n",
        "\n",
        "The `isin()` function is used to filter data based on a list of values. It returns a boolean Series indicating whether each element in the Series is contained in the specified list.\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "```{.python filename=\"Code Snippet\"}\n",
        "filtered_data = df[df['column_name'].isin(['value1', 'value2'])]\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "### 11. `all()` function\n",
        "\n",
        ":::{.callout-tip collapse=\"true\" title=\"All Function Explanation\"}\n",
        "\n",
        "The `all()` function is employed to check if all elements in a boolean Series are True. It is commonly used in conjunction with conditions to evaluate whether a certain condition holds for all elements.\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "```{.python filename=\"Code Snippet\"}\n",
        "all_elements_true = df['boolean_column'].all()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "### 12. `fillna()` function\n",
        "\n",
        ":::{.callout-tip collapse=\"true\" title=\"Fillna Function Explanation\"}\n",
        "\n",
        "The `fillna()` function is used to fill missing (NaN) values in a DataFrame with a specified value or using a specified method. It helps in handling missing data by providing a way to replace or impute missing values.\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "```{.python filename=\"Code Snippet\"}\n",
        "filled_data = df['column_name'].fillna(value)\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "### 13. `mean()` function\n",
        "\n",
        ":::{.callout-tip collapse=\"true\" title=\"Mean Function Explanation\"}\n",
        "\n",
        "The `mean()` function calculates the mean (average) of values in a DataFrame or Series. It is useful for obtaining the central tendency of numerical data, providing insights into the data distribution.\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "```{.python filename=\"Code Snippet\"}\n",
        "mean_value = df['column_name'].mean()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Getting started with Lets-Plot\n",
        "\n",
        "- [Lets-Plot](https://aeturrell.github.io/python4DS/data-visualise.html)\n",
        "\n",
        "What makes a chart look good?\n",
        "\n",
        "Note: The following code snippets use Plotly Express for demonstartion. The course uses Lets-Plot."
      ],
      "id": "02b0c873"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.express as px\n",
        "import pandas as pd\n",
        "url = \"https://github.com/byuidatascience/data4python4ds/raw/master/data-raw/mpg/mpg.csv\"\n",
        "data = pd.read_csv(url)"
      ],
      "id": "8a1f95fe",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Plotly Chart Structure"
      ],
      "id": "bc8c3764"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig = px.scatter(data, x='displ', y='hwy')\n",
        "fig.show()"
      ],
      "id": "28ac879a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Size of Chart\n",
        "\n",
        "**Width and Height**"
      ],
      "id": "1576a3ab"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig = px.scatter(data, x='displ', y='hwy')\n",
        "fig.update_layout(width=600, height=600)\n",
        "\n",
        "fig.show()"
      ],
      "id": "32eb0a8f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.callout-tip collapse=\"true\" title=\"Width and Height Explanation\"}\n",
        "The `width` and `height` parameters in the `update_layout` method are used to set the width and height of the plot in pixels, respectively. In this example, the width is set to 600 pixels, and the height is also set to 600 pixels. Adjust these values according to your desired dimensions for the scatter plot.\n",
        ":::\n",
        "\n",
        "## Title and Subtitle \n",
        "\n",
        "**Title**"
      ],
      "id": "0348a72e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig = px.bar(data, x='cty', y='hwy')\n",
        "fig.update_layout(title_text=\"Bar Chart Example\")\n",
        "fig.show()"
      ],
      "id": "71d3e600",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.callout-tip collapse=\"true\" title=\"Title Explanation\"}\n",
        "The `title_text` parameter in the `update_layout` method is used to set the title of the plot. In this example, the title is set to \"Bar Chart Example\". You can customize the title by changing the value assigned to `title_text` to better describe the content or purpose of your bar chart.\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "**Title and subtitle - Title w/ Subtitle 1**"
      ],
      "id": "26e64454"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig = px.bar(data, x='cty', y='hwy')\n",
        "\n",
        "fig.update_layout(\n",
        "    title_text=\"City vs Highway MPG Bar Chart\",\n",
        "    title_font=dict(color=\"red\"),\n",
        "    title_font_size=18,\n",
        "    title_y=0.95,\n",
        "    title_x=0.5\n",
        ")\n",
        "\n",
        "fig.add_annotation(\n",
        "    text=\"Your Annotation Text\",\n",
        "    font=dict(color=\"blue\"),  # Choose your desired font color\n",
        "    x=0.5,\n",
        "    y=0.9,\n",
        "    showarrow=False\n",
        ")\n",
        "fig.show()"
      ],
      "id": "9e8daa52",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.callout-tip collapse=\"true\" title=\"Title and subtitle - Title w/ Subtitle 1 Explanation\"}\n",
        "The `title_text` parameter in the `update_layout` method is used to set the main title of the plot, and additional parameters like `title_font`, `title_font_size`, `title_y`, and `title_x` are used to customize the appearance and position of the title.\n",
        "\n",
        "The `add_annotation` method is used to add an annotation or subtitle to the plot. In this example, it adds a blue text annotation with the content \"Your Annotation Text\" at a specified position (x=0.5, y=0.9) relative to the plot.\n",
        "\n",
        "Adjust the values of these parameters to customize the appearance and position of the title and annotation according to your preferences.\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "**Title and subtitle - Title w/ Subtitle 2**"
      ],
      "id": "0d5537c2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig = px.bar(data, x='cty', y='hwy')\n",
        "\n",
        "fig.update_layout(\n",
        "    title_text=\"City vs Highway MPG Bar Chart\",\n",
        "    title_font_size=18,\n",
        "    title_y=0.95,\n",
        "    title_x=0.5\n",
        ")\n",
        "\n",
        "fig.add_annotation(\n",
        "    text=\"Your Annotation Text\",\n",
        "    x=0.5,\n",
        "    y=0.9,\n",
        "    showarrow=False\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "755fa1eb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.callout-tip collapse=\"true\" title=\"Title and subtitle - Title w/ Subtitle 2 Explanation\"}\n",
        "The `title_text` parameter in the `update_layout` method is used to set the main title of the plot, and additional parameters like `title_font_size`, `title_y`, and `title_x` are used to customize the appearance and position of the title.\n",
        "\n",
        "The `add_annotation` method is used to add an annotation or subtitle to the plot. In this example, it adds a text annotation with the content \"Your Annotation Text\" at a specified position (x=0.5, y=0.9) relative to the plot.\n",
        "\n",
        "Adjust the values of these parameters to customize the appearance and position of the title and annotation according to your preferences.\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "**Group Variable**"
      ],
      "id": "d5cff6dd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig = px.bar(data, x='manufacturer', y=['cty', 'hwy'], barmode='group')\n",
        "\n",
        "fig.update_layout(\n",
        "    xaxis_title=\"Manufacturer\",\n",
        "    yaxis_title=\"Mileage\",\n",
        "    title_text=\"Average City and Highway Mileage by Manufacturer\"\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "6569f2ac",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.callout-tip collapse=\"true\" title=\"Group Variable Explanation\"}\n",
        "The `x` parameter in the `px.bar` function is set to 'manufacturer', which means the bars will be grouped by the 'manufacturer' variable on the x-axis. The `y` parameter is set to a list ['cty', 'hwy'], indicating that two sets of bars will be plotted for each manufacturer, one for 'cty' and another for 'hwy'.\n",
        "\n",
        "The `barmode='group'` parameter ensures that the bars are grouped for each 'manufacturer'.\n",
        "\n",
        "The `update_layout` method is used to set the titles for the x-axis `(xaxis_title)`, y-axis `(yaxis_title)`, and the overall plot `(title_text)`. In this example, the plot represents the average city and highway mileage by manufacturer.\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "**Axis formatting - Axis Scale removing Zero**"
      ],
      "id": "15ac3ae1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig = px.bar(data, x='manufacturer', y=['cty', 'hwy'], barmode='group')\n",
        "\n",
        "fig.update_layout(\n",
        "    xaxis_title=\"Manufacturer\",\n",
        "    yaxis_title=\"Mileage\",\n",
        "    title_text=\"Average City and Highway Mileage by Manufacturer\",\n",
        "    xaxis=dict(showline=True, showgrid=False),\n",
        "    yaxis=dict(zeroline=False, showline=True, showgrid=False),\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "4ae87fb0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.callout-tip collapse=\"true\" title=\"Axis formatting - Axis Scale removing Zero Explanation\"}\n",
        "The `xaxis_title` and `yaxis_title` parameters in the `update_layout` method are used to set the titles for the `x-axis` and `y-axis`, respectively.\n",
        "\n",
        "The xaxis and yaxis dictionaries in the `update_layout` method provide additional formatting options for the x-axis and y-axis. In this example:\n",
        "\n",
        "`xaxis=dict(showline=True, showgrid=False)` ensures that the x-axis has a visible line but no grid lines.\n",
        "`yaxis=dict(zeroline=False, showline=True, showgrid=False)` ensures that the y-axis has no zero line `(zeroline=False)`, a visible line, and no grid lines.\n",
        "These settings help customize the appearance of the plot by controlling the visibility of axis lines and grid lines.\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "**Axis formatting - Axis Domain Sizing**"
      ],
      "id": "edd702a8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig = px.bar(data, x='manufacturer', y=['cty', 'hwy'], barmode='group')\n",
        "\n",
        "fig.update_layout(\n",
        "    xaxis_title=\"Manufacturer\",\n",
        "    yaxis_title=\"Mileage\",\n",
        "    title_text=\"Average City and Highway Mileage by Manufacturer\",\n",
        "    xaxis=dict(domain=[0.1, 0.9]),  # Adjust the domain as needed\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "c460ce37",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.callout-tip collapse=\"true\" title=\"Axis formatting - Axis Domain Sizing Explanation\"}\n",
        "The `xaxis_title` and `yaxis_title` parameters in the `update_layout` method are used to set the titles for the x-axis and y-axis, respectively.\n",
        "\n",
        "The `xaxis` dictionary in the `update_layout` method includes the `domain` parameter, which is set to [0.1, 0.9]. This parameter controls the size of the x-axis domain, determining the portion of the total width of the plot that the x-axis occupies. In this example, the x-axis is set to span from 10% to 90% of the total width.\n",
        "\n",
        "Adjust the values of the `domain` parameter as needed to control the sizing of the x-axis in your plot.\n",
        ":::\n",
        "\n",
        "\n",
        "**Reference marks - Verticle Reference Line with Color**"
      ],
      "id": "94ad1cd1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig = px.bar(data, x='manufacturer', y=['cty', 'hwy'], barmode='group')\n",
        "\n",
        "fig.update_layout(\n",
        "    xaxis_title=\"Manufacturer\",\n",
        "    yaxis_title=\"Mileage\",\n",
        "    title_text=\"Average City and Highway Mileage by Manufacturer\"\n",
        ")\n",
        "\n",
        "fig.add_shape(\n",
        "    dict(\n",
        "        type=\"line\",\n",
        "        x0=\"Your_X_Value\",  # Specify the x-coordinate of the line\n",
        "        x1=\"Your_X_Value\",  # Specify the x-coordinate of the line\n",
        "        y0=0,\n",
        "        y1=1,\n",
        "        line=dict(color=\"red\"),  # Specify the color of the line\n",
        "    )\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "806fa991",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.callout-tip collapse=\"true\" title=\"Reference marks - Verticle Reference Line with Color Explanation\"}\n",
        "The `add_shape` method is used to add a reference line to the plot. In this example, a vertical reference line is added to the x-axis at the specified x-coordinate value.\n",
        "\n",
        "The `type=\"line\"` parameter specifies that the added shape is a line. The x0 and x1 parameters are set to \"Your_X_Value\" to specify the x-coordinates where the line starts and ends. Replace \"Your_X_Value\" with the actual x-coordinate value where you want the reference line.\n",
        "\n",
        "The `y0` and `y1` parameters set the starting and ending points on the y-axis. In this example, they are set to 0 and 1, respectively.\n",
        "\n",
        "The `line` dictionary inside the shape specifies the attributes of the line, such as the color. In this case, the line color is set to red. Adjust the values as needed to customize the appearance of the reference line.\n",
        ":::\n",
        "\n",
        "\n",
        "**Reference marks - Verticle Reference Line with Text**"
      ],
      "id": "e910142f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig = px.bar(data, x='manufacturer', y=['cty', 'hwy'], barmode='group')\n",
        "\n",
        "fig.update_layout(\n",
        "    xaxis_title=\"Manufacturer\",\n",
        "    yaxis_title=\"Mileage\",\n",
        "    title_text=\"Average City and Highway Mileage by Manufacturer\"\n",
        ")\n",
        "\n",
        "fig.add_shape(\n",
        "    dict(\n",
        "        type=\"line\",\n",
        "        x0=\"Your_X_Value\",  # Specify the x-coordinate of the line\n",
        "        x1=\"Your_X_Value\",  # Specify the x-coordinate of the line\n",
        "        y0=0,\n",
        "        y1=1,\n",
        "        line=dict(color=\"red\"),  # Specify the color of the line\n",
        "    )\n",
        ")\n",
        "\n",
        "fig.add_annotation(\n",
        "    text=\"Your Text\",\n",
        "    x=\"Your_X_Value\",  # Specify the x-coordinate of the text\n",
        "    y=500,  # Adjust the y-coordinate of the text as needed\n",
        "    showarrow=False\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "c8ad5d00",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.callout-tip collapse=\"true\" title=\"Reference marks - Verticle Reference Line with Text Explanation\"}\n",
        "\n",
        "The `add_shape` method is used to add a reference line to the plot. In this example, a vertical reference line is added to the x-axis at the specified x-coordinate value.\n",
        "\n",
        "The `type=\"line\"` parameter specifies that the added shape is a line. The x0 and x1 parameters are set to \"Your_X_Value\" to specify the x-coordinates where the line starts and ends. Replace \"Your_X_Value\" with the actual x-coordinate value where you want the reference line.\n",
        "\n",
        "The `y0` and `y1` parameters set the starting and ending points on the y-axis. In this example, they are set to 0 and 1, respectively.\n",
        "\n",
        "The `line` dictionary inside the shape specifies the attributes of the line, such as the color. In this case, the line color is set to red.\n",
        "\n",
        "The `add_annotation` method is used to add text annotation to the plot. The text parameter is set to \"Your Text\", and the x and y parameters specify the coordinates where the text will be placed. Adjust the values of these parameters as needed to customize the appearance of the reference line and text.\n",
        ":::"
      ],
      "id": "27631d08"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\drp36\\AppData\\Local\\Programs\\Python\\Python312\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
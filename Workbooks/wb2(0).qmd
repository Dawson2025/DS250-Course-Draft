---
title: "Project 2 Workbook"
subtitle: "Course DS 250"
author: "Brother Clark"
uses: quarto-dev/quarto-actions/publish@v2
with:
  target: gh-pages
  to: html # If set, it will be equivalent to `quarto render --to html`
  path: source-folder # By default, the current working dir is used i.e `quarto render .`
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-copy: true
    code-fold: true
    code-line-numbers: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-tools:
        source: false
        toggle: true
        caption: See code
execute:
    warning: false
---


# Project 2 WorkBook


## Tutoring Lab Info
The [data science lab](https://byuidatascience.github.io/lab/) is a resource you can use in person, online, and in Slack.

---

# Introduction to Markdown Language

---

::: {.callout-note collapse="true"}
## Expand To See Links to Chapter in the book `Python for DataScience`
- [Chapter on Mardown: Text and Code Chunks](https://byuidatascience.github.io/python4ds/markdown.html)
- [Additional Resource: Basic Syntax Markdown Guide](https://www.markdownguide.org/basic-syntax/)
:::
````
Surround ```chunks of code``` with ``` or a single line of `code` with `
Follow the first set of ``` with the words `python`

```python
# setup
import altair as alt
import pandas as pd
import numpy as np
alt.data_transformers.enable('json')
```
````
:::{.callout-tip collapse="true" title="Expand To See The Results"}
<br>

```python
# setup
import altair as alt
import pandas as pd
import numpy as np
alt.data_transformers.enable('json')
```

:::

## Text Basics
### Horizontal Lines

Add horizontal lines with either three `---`, `***`, or `___`
But you also need blank lines above and below them

:::{.callout-tip collapse="true" title="Expand To See The Results"}
<br>
---

:::

### Headers
````
# Level 1 Header
## Level 2 Header
### Level 3 Header
#### Level 4 Header
##### Level 5 Header
###### Level 6 Header
````
Note: only top 3 Levels of Headers will automatically generate a table of contents.<br> Also Level 2 will automatically add a line underneath it. 

::: {.callout-tip collapse="true"}
## Expand To See The Results
# Level 1 Header
## Level 2 Header
### Level 3 Header
#### Level 4 Header
##### Level 5 Header
###### Level 6 Header
:::

### Italics and Bold
````
_italics_ use one `_`
you can also use _mid_ sentence

__bold__ use two `__`
you can also use __mid__ sentence
````
::: {.callout-tip collapse="true"}
## Expand To See The Results
_italics_ use one `_`
you can also use _mid_ sentence

__bold__ use two `__`
you can also use __mid__ sentence
:::

### Bullet Items
````
- Bulleted items
  - Indented bulleted items
  - You can have as many as you want
    - Really as many as you want
      - I knew you wanted one more
````
::: {.callout-tip collapse="true"}
## Expand To See The Results
- Bulleted items
  - Indented bulleted items
  - You can have as many as you want
    - Really as many as you want
      - I knew you wanted one more bullet
:::
### Numbered Items
````
1. Numbered items
1. Numbered items continued
1. Dont worry these will iterate
1. Keep using 1. each time
````
::: {.callout-tip collapse="true"}
## Expand To See The Results
1. Numbered items
1. Numbered items continued
1. Dont worry these will iterate
1. Keep using 1. each time
:::

---

# Intro to Pandas

---

## Pandas DataFrame (`df`)

::: {.callout-note collapse="true"}
## Expand To See Links to Chapter in the book `Python for DataScience`
- [Chapter on Pandas: DataFrames](https://byuidatascience.github.io/python4ds/dataframe.html)
:::

What is a pandas dataFrame? We can read the [official documentation](https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#dataframe). I also like the video in [this tutorial](https://www.datacamp.com/community/tutorials/pandas-tutorial-dataframe-python).

Use the Import Packages and Load Data for the Code that follows.

## Import Packages
````{}
import `library` as `alias`
````

```{.python filename="Import Libraries"}
#| label: libraries
#| include: false
import pandas as pd
import altair as alt
import numpy as np

from IPython.display import Markdown
from IPython.display import display
from tabulate import tabulate
```

## Load Data
```{}
data = pd.read_csv(`url` or `file_path`)
```

```{.python filename="Load Data"}
#| label: project data
#| code-summary: Read and format project data
# Include and execute your code here
url = "https://github.com/byuidatascience/data4names/raw/master/data-raw/names_year/names_year.csv"
data = pd.read_csv(url)
```

Data Frames come with attributes and built-in functions that can help us get a feel for our data.

Run the code below one at a time (or use other functions of your choice) to explore the `names` data. What do you learn?

```{.python filename=".columns"}
data.columns
```
```{.python filename=".shape"}
data.shape
```
```{.python filename=".size"}
data.size
```
```{.python filename=".head()"}
data.head()
```
```{.python filename=".describe()"}
data.describe()
```
<!---- https://towardsdatascience.com/wrangling-data-with-pandas-27ef828aff01 ----->

## Pandas Data Transformation

::: {.callout-note collapse="true"}
## Expand To See Links to Chapter in the book `Python for DataScience`
- [Chapter on Pandas: Transformations](https://byuidatascience.github.io/python4ds/transform.html#filter-rows-with-.query)
:::

## Prove Activity - Explore Pandas and the Data

**1. How many `.unique()` names does the `names` dataframe contain?** <br>
_Work with a partner to find the answer. You might want to look at this [pandas cheat sheet](https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf)._

::: {.callout-tip title="Hint" collapse="true"}
1. Pull the name column out as a series
1. Use the pandas unique function `pd.unique()`
1. Find the size of the series
:::

::: {.callout-caution collapse="true"}
## Expand To See An Example Solution
```{.python}
pd.unique(data.name)
```
:::

**2. What is the range of years in the `names` dataframe?** <br>
_Again, work with a partner and use the pandas cheat sheet._

::: {.callout-tip title="Hint" collapse="true"}
1. Pull the year column out as a series
1. Find the max
1. Find the min
:::

::: {.callout-caution collapse="true"}
## Expand To See An Example Solution
```{.python}
pd.unique(data.year).min()
pd.unique(data.year).max()
pd.unique(data.year).size
```
:::

**3. How would you `.query()` for the `name` John?** <br>

::: {.callout-tip title="Hint" collapse="true"}
1. `pd.query()` the name when it is equal to `==` John
:::

::: {.callout-caution collapse="true"}
## Expand To See An Example Solution
```{.python}
data.query('name == "John"')
pd.unique(data.query('name == "John"'))
```
:::

**4. What is the range of years in the `names df` for the `name` John?** <br>

::: {.callout-tip title="Hint" collapse="true"}
1. Use your combined knowledge to `.query()`
1. and to find the `.max()` and `.min()`
1. and `.size()` for a particular `name`
:::

:::{.callout-caution collapse="true"}
## Expand To See An Example Solution
```{.python}
pd.unique(data.query('name == "John"').year).min()
pd.unique(data.query('name == "John"').year).max()
pd.unique(data.query('name == "John"').year).size
```
:::

**5. How would you query for multiple names in a `df`?** <br>

::: {.callout-tip title="Hint" collapse="true"}
1. Similar to what you did above for a single name
1. Now one way is to use the `|` OR bar
1. Another way is to use `in` a `[]` List
:::

:::{.callout-caution collapse="true"}
## Expand To See An Example Solution
```{.python}
#note you can not use pd.unique() with multiple names
data.query('name == "John" | name == "Peter"')
data.query('name in ["John","Peter","Bob"]')
```
:::

---

# Getting started with Altair

---

::: {.callout-note collapse="true"}
## Expand To See Links to Chapter in the book `Python for DataScience`
- [Chapter on Altair: Setup and Basics](https://byuidatascience.github.io/python4ds/data-visualisation.html)
- [Chapter on Altair: Labels,Annotation, Scales](https://byuidatascience.github.io/python4ds/graphics-for-communication.html)
:::
_What makes a chart look good?_

```{.python filename="Altair Chart Structure"}
alt.Chart()
   .mark_*()
   .encode()
```

## Size of chart
```{.python filename="Width and Height"}
.properties(
    width=600,
    height=150,
)
```

## Title and subtitle
```{.python filename="Title"}
.properties(
    title="Bump Chart for Stock Prices",,
)
```
```{.python filename="Title w/ Subtitle 1"}
.properties(
    title={
      "text": ["First line of title", "Second line of title"], 
      "subtitle": ["Cool first line of subtitle", "Even cooler second line wow dang"],
      "color": "red",
      "subtitleColor": "green"
    }
)
```
```{.python filename="Title w/ Subtitle 2"}
title=alt.Title(
       "Iowa's green energy boom",
       subtitle="A growing share of the state's energy has come from renewable sources"
   )
```
::: {.callout-tip collapse="true"}
## Expand For Links to Additional Examples
- [Example 1](https://github.com/altair-viz/altair/issues/1919)
- [Example 2](https://stackoverflow.com/questions/57244390/has-anyone-figured-out-a-workaround-to-add-a-subtitle-to-an-altair-generated-cha)
:::

## Size and color of bars
```{.python filename="Bar Chart Size"}
alt.Chart(data).mark_bar(size=30)
```
```{.python filename="Bar Chart Size and Width"}
alt.Chart(data).mark_bar(size=30).encode(
    x='name:O',
    y='value:Q'
).properties(width=200)
```
```{.python filename="Bar Chart Size and Step"}
alt.Chart(data).mark_bar(size=30).encode(
    x='name:N',
    y='value:Q'
).properties(width=alt.Step(100))
```

## Axis formatting
```{.python filename="Axis Titles"}
axis = alt.Axis(format = 'd', title = "Year")
axis = alt.Axis(title = "Children with Name")
```
```{.python filename="Axis Scale removing Zero"}
alt.X('Acceleration:Q').scale(zero=False)
```
```{.python filename="Axis Domain Sizing"}
.scale(domain=(5, 20))
``` 

## Reference marks
```{.python filename="Verticle Reference Line with Color"}
line = alt.Chart(line_df).mark_rule(color="red").encode(x = "year")
chart + line
```
::: {.callout-tip collapse="true"}
## Expand For Links to Additional Examples
- [Example 1](https://altair-viz.github.io/gallery/bar_chart_with_highlighted_bar.html)
:::

## Reference text
```{.python filename="Verticle Reference Line with Text"}
dat_label = pd.DataFrame({'x': [1976], 'y': [50000], 'label': ['October 6, 1976']})
chart + line + text
```
::: {.callout-tip collapse="true"}
## Expand For Links to Additional Examples
- [Example 1](https://altair-viz.github.io/gallery/scatter_with_labels.html)
- [Example 2](https://altair-viz.github.io/gallery/bar_chart_with_labels.html)
- [Example 3](https://stackoverflow.com/questions/57762169/how-do-you-add-a-single-text-label-to-the-max-point-in-an-altair-scatter-plot)
:::

## Data Labels
```{.python filename="Data Labels"}
source = data.wheat()

base = alt.Chart(source).encode(
    x='wheat',
    y="year:O",
    text='wheat'
)
base.mark_bar() + base.mark_text(align='left', dx=2)
```

## Horizontal Datum Line
```{.python filename="Horizontal Reference Line"}
alt.Chart().mark_rule().encode(y=alt.datum(1))
```

## Additional Resources
- [Learn more about Customizing Altair Visualizations](https://altair-viz.github.io/user_guide/customization.html)
- [Altair Example Gallery](https://altair-viz.github.io/gallery/index.html)

## Altair videos

- [What is Altair?](https://www.youtube.com/watch?v=AAuPPorsmJc&t=191s)
- [Altair's Visualization Grammar](https://www.youtube.com/watch?v=U7w1XumKK60)
- [Altair's Data Types](https://www.youtube.com/watch?v=LSEPyCqjoAg)
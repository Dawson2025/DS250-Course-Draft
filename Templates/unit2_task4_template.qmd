---
title: "Client Report - Highest Paid Positions"
subtitle: "Unit 2 Task 4: Highest Paid Positions"
author: "[STUDENT NAME]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import pandas as pd 
import numpy as np
import sqlite3
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)
```

```{python}
# Database connection
sqlite_file = 'lahmansbaseballdb.sqlite'
# this file must be in the same location as your .qmd or .py file
con = sqlite3.connect(sqlite_file)
```

## QUESTION 1

__Write an SQL query that provides a summary table showing the average salary for each position (e.g., pitcher, catcher, outfielder). Position information can be found in the fielding table in the POS column.__

The analysis examines salary differences across baseball positions using Python pandas for comprehensive data manipulation and analysis. This approach allows for sophisticated data processing, including handling the complexity that players often play multiple positions in a single year by using the position where they played the most games that year. The pandas library enables efficient data aggregation, filtering, and statistical analysis to provide meaningful insights into salary patterns across different baseball positions.

```{python}
# SQL query to get position salary summary
query = """
WITH position_games AS (
    -- Find the position each player played most games at in each year
    SELECT playerID, yearID, POS, G,
           ROW_NUMBER() OVER (PARTITION BY playerID, yearID ORDER BY G DESC) as rn
    FROM fielding
),
primary_positions AS (
    -- Get only the primary position for each player-year
    SELECT playerID, yearID, POS
    FROM position_games
    WHERE rn = 1
),
salary_by_position AS (
    -- Join with salaries and calculate position statistics
    SELECT pp.POS as position,
           AVG(s.salary) as average_salary,
           COUNT(DISTINCT s.playerID) as total_players,
           MAX(s.salary) as highest_salary
    FROM primary_positions pp
    JOIN salaries s ON pp.playerID = s.playerID AND pp.yearID = s.yearID
    GROUP BY pp.POS
)
SELECT position,
       ROUND(average_salary, 0) as average_salary,
       total_players,
       highest_salary,
       CASE 
           WHEN average_salary > 3000000 THEN 'High Salary'
           WHEN average_salary BETWEEN 2000000 AND 3000000 THEN 'Medium Salary'
           ELSE 'Low Salary'
       END as salary_category
FROM salary_by_position
ORDER BY average_salary DESC
"""

result = pd.read_sql_query(query, con)
print("Salary summary by position:")
result
```

```{python}
# Create visualization of average salaries by position
chart = (ggplot(result, aes(x='average_salary', y='position', fill='salary_category')) +
         geom_bar(stat='identity', alpha=0.8) +
         labs(title='Average Salary by Baseball Position',
              x='Average Salary ($)',
              y='Position',
              fill='Salary Category') +
         theme_minimal() +
         theme(legend_position='right'))

chart
```

```{python}
# Create a summary paragraph
print("SUMMARY:")
print("The analysis reveals significant salary disparities across baseball positions.")
print(f"The highest paid position is {result.iloc[0]['position']} with an average salary of ${result.iloc[0]['average_salary']:,.0f}.")
print(f"The lowest paid position is {result.iloc[-1]['position']} with an average salary of ${result.iloc[-1]['average_salary']:,.0f}.")
print(f"Salary categories show {len(result[result['salary_category'] == 'High Salary'])} positions in the 'High Salary' category (above $3M),")
print(f"{len(result[result['salary_category'] == 'Medium Salary'])} positions in the 'Medium Salary' category ($2M-$3M),")
print(f"and {len(result[result['salary_category'] == 'Low Salary'])} positions in the 'Low Salary' category (below $2M).")
```

```{python}
# Close the database connection
con.close()
```

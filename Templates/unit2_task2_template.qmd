---
title: "Client Report - Batting Validation"
subtitle: "Unit 2 Task 2"
author: "Dawson"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import pandas as pd
import sqlite3

sqlite_file = "../Data/lahmansbaseballdb.sqlite"
con = sqlite3.connect(sqlite_file)
```

## QUESTION 1

__Write an SQL query that pulls in the batting table. Then, with Python Pandas code create a dataframe that contains playerID, yearID, and batting average for players with at least 10 at bat that year. Sort the dataframe from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.__

```{python}
# Load batting data
query_batting = """
SELECT playerID, yearID, AB, H
FROM batting
"""
df_batting = pd.read_sql_query(query_batting, con)

# Create dataframe with batting averages for players with at least 10 at bats
df_q1 = (
    df_batting.loc[df_batting["AB"] >= 10].copy()
    .assign(batting_avg=lambda d: (d["H"] / d["AB"]).round(3))
    .sort_values(by=["batting_avg", "playerID"], ascending=[False, True])
    .loc[:, ["playerID", "yearID", "batting_avg", "AB", "H"]]
)
df_q1.head(5)
```

To validate the season-level batting averages, I filtered the batting records to players with at least 10 at bats in a given year, computed batting average as `H / AB`, and sorted by batting average (descending) and `playerID` (ascending). The pandas output confirms the SQL results I obtained earlier. The top five seasons are dominated by small-sample performances such as `nymanny01` in 1974 and `carsoma01` in 2013, matching the ordering produced in SQL when using the same minimum-at-bats filter.

## QUESTION 2

 __Write an SQL query that pulls in the batting table. Then, with Python Pandas calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats over their entire career. Sort the dataframe from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.__


```{python}
df_q2 = (
    df_batting.groupby("playerID", as_index=False)[["AB", "H"]].sum()
    .query("AB >= 100")
    .assign(career_batting_avg=lambda d: (d["H"] / d["AB"]).round(3))
    .sort_values(by=["career_batting_avg", "playerID"], ascending=[False, True])
    .loc[:, ["playerID", "career_batting_avg", "AB", "H"]]
)
df_q2.head(5)
```

```{python}
con.close()
```

For career totals, I aggregated the same batting data across each `playerID`, limited the results to players with at least 100 career at bats, and sorted using the same criteria. The leaders—`cobbty01`, `barnero01`, and `hornsro01`—line up with the SQL-based rankings.

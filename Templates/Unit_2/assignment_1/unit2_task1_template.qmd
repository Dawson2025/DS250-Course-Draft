---
title: "Client Report - Batting Averages"
subtitle: "Unit 2 Task 1"
author: "Dawson Packer"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import pandas as pd 
import numpy as np
import sqlite3
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
sqlite_file = '/home/dawson/code/DS250-Course-Draft/Data/lahmansbaseballdb.sqlite'
# Database is located in the Data directory (absolute path)
con = sqlite3.connect(sqlite_file)
```

## QUESTION 1

__Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.__

The results reveal an interesting pattern: all five top players achieved a perfect 1.000 batting average (1 hit in 1 at-bat). These single-at-bat performances span over 95 years, from 1923 (abramge01) to 2019 (alanirj01), demonstrating that such rare events occur across different eras. While statistically perfect, these results represent very small sample sizes—just one plate appearance—and therefore may not reflect true hitting ability. This underscores why minimum at-bat thresholds are important for meaningful batting average statistics.

```{python}
# SQL query to calculate batting averages for players with at least 1 at bat
query1 = """
SELECT 
    playerID,
    yearID,
    CAST(H AS FLOAT) / NULLIF(AB, 0) AS batting_avg
FROM batting
WHERE AB >= 1
ORDER BY batting_avg DESC, playerID ASC
LIMIT 5
"""

result1 = pd.read_sql_query(query1, con)
print(result1.head(5))
```


## QUESTION 2

__Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.__  

With the minimum 10 at-bat threshold, we see more realistic batting averages ranging from 0.571 to 0.643 (57.1% to 64.3%). The top performer is nymanny01 in 1974 with 0.643 (9 hits in 14 at-bats), followed closely by carsoma01 in 2013 at 0.636 (7 hits in 11 at-bats). Notably, two players tied at 0.600—altizda01 (1910) and johnsde01 (1975)—spanning the early 20th century and modern era. The years represented (1910, 1948, 1974-1975, 2013) show these exceptional single-season performances have occurred throughout baseball history, not just in recent decades.

```{python}
# SQL query to calculate batting averages for players with at least 10 at bats
query2 = """
SELECT 
    playerID,
    yearID,
    CAST(H AS FLOAT) / NULLIF(AB, 0) AS batting_avg
FROM batting
WHERE AB >= 10
ORDER BY batting_avg DESC, playerID ASC
LIMIT 5
"""

result2 = pd.read_sql_query(query2, con)
print(result2.head(5))
```


## QUESTION 3

__Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats over their entire career, and print the top 5 results.__

The career statistics paint a different picture than single-season performances. Ty Cobb (cobbty01) leads with a career average of 0.366 (36.6%) over 11,436 at-bats—4,189 career hits. This is followed by barnero01 at 0.360 (36.0%) with 2,391 at-bats, and Rogers Hornsby (hornsro01) at 0.358 (35.8%) with 8,173 at-bats. All five players in the top tier achieved career averages between 0.355 and 0.366, demonstrating remarkable consistency over thousands of plate appearances. Interestingly, these all-time greats played primarily in the early 20th century, suggesting the importance of historical context when comparing career achievements across eras.

```{python}
# SQL query to calculate career batting averages (all years combined)
query3 = """
SELECT 
    playerID,
    SUM(H) AS total_hits,
    SUM(AB) AS total_at_bats,
    CAST(SUM(H) AS FLOAT) / NULLIF(SUM(AB), 0) AS career_batting_avg
FROM batting
GROUP BY playerID
HAVING SUM(AB) >= 100
ORDER BY career_batting_avg DESC, playerID ASC
LIMIT 5
"""

result3 = pd.read_sql_query(query3, con)
print(result3.head(5))
```
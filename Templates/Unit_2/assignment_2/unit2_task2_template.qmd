---
title: "Client Report - Batting Average Validation"
subtitle: "Unit 2 Task 2"
author: "[STUDENT NAME]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import pandas as pd 
import numpy as np
import sqlite3
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
sqlite_file = '/home/dawson/code/DS250-Course-Draft/Data/lahmansbaseballdb.sqlite'
# Database is located in the Data directory (absolute path)
con = sqlite3.connect(sqlite_file)
```

## QUESTION 1

__Write an SQL query that pulls in the batting average table. Then, with Python Pandas code create a dataframe that contains playerID, yearID, and batting average for players with at least 10 at bat that year. Sort the dataframe from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.__

This task validates our SQL approach by using pandas to perform the same calculations. We first pull the entire batting table using SQL, then use pandas to filter, calculate batting averages, and sort the results. This demonstrates how data wrangling can be done in both SQL and Python.

```{python}
# Execute an SQL query to pull in the data
q = """SELECT *
        FROM batting
    """
df_batting = pd.read_sql_query(q, con)
```

```{python}
# Now use pandas code to work with the 'df_batting' data frame and complete the task
# Calculate batting average: hits divided by at-bats
df_batting['batting_avg'] = df_batting['H'] / df_batting['AB']

# Filter for players with at least 10 at-bats
df_filtered = df_batting[df_batting['AB'] >= 10].copy()

# Select only the required columns
df_result = df_filtered[['playerID', 'yearID', 'batting_avg']].copy()

# Sort by batting average (descending), then by playerID (ascending)
df_result = df_result.sort_values(['batting_avg', 'playerID'], ascending=[False, True])

# Show top 5 results
top5_q1 = df_result.head(5)
print(top5_q1)
```

## QUESTION 2

__Now use Python Pandas to calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats over their entire career, and print the top 5 results.__

This question requires aggregating data across all years for each player to calculate career batting averages. We use pandas groupby operations to sum hits and at-bats for each player, then calculate their career batting average. Only players with at least 100 career at-bats are included to ensure meaningful statistics.

```{python}
# Include and execute your pandas code code here. (You already read in the batting table in Question 1)
# Group by playerID and sum hits and at-bats across all years
career_stats = df_batting.groupby('playerID').agg({
    'H': 'sum',
    'AB': 'sum'
}).reset_index()

# Calculate career batting average
career_stats['career_batting_avg'] = career_stats['H'] / career_stats['AB']

# Filter for players with at least 100 career at-bats
career_stats_filtered = career_stats[career_stats['AB'] >= 100].copy()

# Select only required columns
df_career = career_stats_filtered[['playerID', 'career_batting_avg']].copy()

# Sort by career batting average (descending), then by playerID (ascending)
df_career = df_career.sort_values(['career_batting_avg', 'playerID'], ascending=[False, True])

# Show top 5 results
top5_q2 = df_career.head(5)
print(top5_q2)
```



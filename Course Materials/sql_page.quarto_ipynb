{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Introduction\n",
        "\n",
        "Structured Query Language (SQL) is a powerful tool for managing and manipulating relational databases. It is essential for data scientists, analysts, and anyone working with large datasets. This chapter will explore the importance of SQL, its applications, and provide example code format to illustrate its utility.\n",
        "\n",
        "## Why SQL is Important\n",
        "\n",
        "1. **Data Management**: SQL allows for efficient management of large volumes of data. It provides the means to create, read, update, and delete data in a relational database.\n",
        "2. **Data Retrieval**: With SQL, you can perform complex queries to retrieve specific data from one or more tables, making it easier to analyze and draw insights.\n",
        "3. **Data Manipulation**: SQL enables the manipulation of data through operations such as sorting, filtering, and aggregating. This is crucial for data cleaning and preprocessing.\n",
        "4. **Data Integration**: SQL supports the integration of data from different sources, allowing for comprehensive data analysis.\n",
        "5. **Standardization**: SQL is a standardized language used by most relational database management systems (RDBMS), making it a versatile and essential skill for professionals in the field.\n",
        "\n",
        "## Basic SQL Concepts"
      ],
      "id": "2749d67d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import sqlite3\n",
        "import pandas as pd"
      ],
      "id": "ec8f25eb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Basic SQL Concepts\n",
        "\n",
        "To illustrate the following SQL concepts, we will use the `employees` table with the following data:\n",
        "\n",
        "**Table: employees**\n",
        "\n",
        "| id  | first_name | last_name | department | salary |\n",
        "|-----|------------|-----------|------------|--------|\n",
        "| 1   | Alice      | Smith     | HR         | 60000  |\n",
        "| 2   | Bob        | Johnson   | IT         | 80000  |\n",
        "| 3   | Charlie    | Lee       | Sales      | 55000  |\n",
        "| 4   | David      | Kim       | HR         | 75000  |\n",
        "| 5   | Eva        | Brown     | IT         | 65000  |\n",
        "| 6   | Frank      | Wilson    | Sales      | 70000  |\n",
        "| 7   | Grace      | Taylor    | HR         | 62000  |\n",
        "| 8   | Henry      | Anderson  | IT         | 77000  |\n",
        "| 9   | Irene      | Thomas    | Sales      | 53000  |\n",
        "| 10  | Jack       | White     | HR         | 58000  |\n",
        "| 11  | Karen      | Harris    | IT         | 69000  |\n",
        "| 12  | Leo        | Martin    | Sales      | 50000  |\n",
        "| 13  | Mia        | Jackson   | HR         | 64000  |\n",
        "| 14  | Noah       | Lee       | IT         | 72000  |\n",
        "| 15  | Olivia     | Perez     | Sales      | 68000  |\n",
        "| 16  | Paul       | Young     | HR         | 61000  |\n",
        "| 17  | Quinn      | King      | IT         | 76000  |\n",
        "| 18  | Rachel     | Scott     | Sales      | 57000  |\n",
        "| 19  | Sam        | Green     | HR         | 63000  |\n",
        "| 20  | Tina       | Adams     | IT         | 81000  |\n",
        "\n",
        "\n",
        "### SELECT and FROM\n",
        "\n",
        "The `SELECT` statement is used to fetch data from a database, and the `FROM` clause specifies the table.\n",
        "\n",
        "```sql\n",
        "-- Selecting all columns from a table\n",
        "p = \"\"\"\n",
        "\n",
        "SELECT * \n",
        "FROM \n",
        "  employees;\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "| id  | first_name | last_name | department | salary |\n",
        "|-----|------------|-----------|------------|--------|\n",
        "| 1   | Alice      | Smith     | HR         | 60000  |\n",
        "| 2   | Bob        | Johnson   | IT         | 80000  |\n",
        "| 3   | Charlie    | Lee       | Sales      | 55000  |\n",
        "| 4   | David      | Kim       | HR         | 75000  |\n",
        "| 5   | Eva        | Brown     | IT         | 65000  |\n",
        "| 6   | Frank      | Wilson    | Sales      | 70000  |\n",
        "| 7   | Grace      | Taylor    | HR         | 62000  |\n",
        "| 8   | Henry      | Anderson  | IT         | 77000  |\n",
        "| 9   | Irene      | Thomas    | Sales      | 53000  |\n",
        "| 10  | Jack       | White     | HR         | 58000  |\n",
        "| 11  | Karen      | Harris    | IT         | 69000  |\n",
        "| 12  | Leo        | Martin    | Sales      | 50000  |\n",
        "| 13  | Mia        | Jackson   | HR         | 64000  |\n",
        "| 14  | Noah       | Lee       | IT         | 72000  |\n",
        "| 15  | Olivia     | Perez     | Sales      | 68000  |\n",
        "| 16  | Paul       | Young     | HR         | 61000  |\n",
        "| 17  | Quinn      | King      | IT         | 76000  |\n",
        "| 18  | Rachel     | Scott     | Sales      | 57000  |\n",
        "| 19  | Sam        | Green     | HR         | 63000  |\n",
        "| 20  | Tina       | Adams     | IT         | 81000  |\n",
        "\n",
        "\n",
        "\n",
        "```sql\n",
        "-- Selecting specific columns\n",
        "p = \"\"\"\n",
        "\n",
        "SELECT \n",
        "  first_name, \n",
        "  last_name, \n",
        "  salary \n",
        "FROM \n",
        "  employees;\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "\n",
        "| id  | first_name | last_name | salary |\n",
        "|-----|------------|-----------|--------|\n",
        "| 1   | Alice      | Smith     | 60000  |\n",
        "| 2   | Bob        | Johnson   | 80000  |\n",
        "| 3   | Charlie    | Lee       | 55000  |\n",
        "| 4   | David      | Kim       | 75000  |\n",
        "| 5   | Eva        | Brown     | 65000  |\n",
        "| 6   | Frank      | Wilson    | 70000  |\n",
        "| 7   | Grace      | Taylor    | 62000  |\n",
        "| 8   | Henry      | Anderson  | 77000  |\n",
        "| 9   | Irene      | Thomas    | 53000  |\n",
        "| 10  | Jack       | White     | 58000  |\n",
        "| 11  | Karen      | Harris    | 69000  |\n",
        "| 12  | Leo        | Martin    | 50000  |\n",
        "| 13  | Mia        | Jackson   | 64000  |\n",
        "| 14  | Noah       | Lee       | 72000  |\n",
        "| 15  | Olivia     | Perez     | 68000  |\n",
        "| 16  | Paul       | Young     | 61000  |\n",
        "| 17  | Quinn      | King      | 76000  |\n",
        "| 18  | Rachel     | Scott     | 57000  |\n",
        "| 19  | Sam        | Green     | 63000  |\n",
        "| 20  | Tina       | Adams     | 81000  |\n",
        "\n",
        "\n",
        "\n",
        "### SELECT EXCLUDE and RENAME\n",
        "\n",
        "You can exclude columns using `SELECT` and rename them for clarity.\n",
        "\n",
        "```sql\n",
        "-- Selecting all but one column\n",
        "p = \"\"\"\n",
        "\n",
        "SELECT * \n",
        "EXCLUDE \n",
        "  salary \n",
        "FROM \n",
        "  employees;\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "| id  | first_name | last_name | department | \n",
        "|-----|------------|-----------|------------|\n",
        "| 1   | Alice      | Smith     | HR         | \n",
        "| 2   | Bob        | Johnson   | IT         | \n",
        "| 3   | Charlie    | Lee       | Sales      | \n",
        "| 4   | David      | Kim       | HR         | \n",
        "| 5   | Eva        | Brown     | IT         |\n",
        "| 6   | Frank      | Wilson    | Sales      | \n",
        "| 7   | Grace      | Taylor    | HR         | \n",
        "| 8   | Henry      | Anderson  | IT         | \n",
        "| 9   | Irene      | Thomas    | Sales      | \n",
        "| 10  | Jack       | White     | HR         | \n",
        "| 11  | Karen      | Harris    | IT         | \n",
        "| 12  | Leo        | Martin    | Sales      | \n",
        "| 13  | Mia        | Jackson   | HR         | \n",
        "| 14  | Noah       | Lee       | IT         | \n",
        "| 15  | Olivia     | Perez     | Sales      | \n",
        "| 16  | Paul       | Young     | HR         | \n",
        "| 17  | Quinn      | King      | IT         | \n",
        "| 18  | Rachel     | Scott     | Sales      | \n",
        "| 19  | Sam        | Green     | HR         | \n",
        "| 20  | Tina       | Adams     | IT         | \n",
        "\n",
        "\n",
        "\n",
        "```sql\n",
        "-- Renaming columns\n",
        "p = \"\"\"\n",
        "\n",
        "SELECT \n",
        "  first_name AS fname, \n",
        "  last_name AS lname \n",
        "FROM \n",
        "  employees;\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "| fname   | lname   |\n",
        "|---------|---------|\n",
        "| Alice   | Smith   |\n",
        "| Bob     | Johnson |\n",
        "| Charlie | Lee     |\n",
        "| David   | Kim     |\n",
        "| Eva     | Brown   |\n",
        "| Frank   | Wilson  |\n",
        "| Grace   | Taylor  |\n",
        "| Henry   | Anderson|\n",
        "| Irene   | Thomas  |\n",
        "| Jack    | White   |\n",
        "| Karen   | Harris  |\n",
        "| Leo     | Martin  |\n",
        "| Mia     | Jackson |\n",
        "| Noah    | Lee     |\n",
        "| Olivia  | Perez   |\n",
        "| Paul    | Young   |\n",
        "| Quinn   | King    |\n",
        "| Rachel  | Scott   |\n",
        "| Sam     | Green   |\n",
        "| Tina    | Adams   |\n",
        "\n",
        "\n",
        "### LIMIT and OFFSET\n",
        "\n",
        "The `LIMIT` clause restricts the number of rows returned, and `OFFSET` skips rows before beginning to return rows.\n",
        "\n",
        "```sql\n",
        "-- Limiting the number of rows returned\n",
        "\n",
        "p = \"\"\"\n",
        "\n",
        "SELECT * \n",
        "FROM \n",
        "  employees \n",
        "LIMIT \n",
        "  10;\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "| id  | first_name | last_name | department | salary |\n",
        "|-----|------------|-----------|------------|--------|\n",
        "| 1   | Alice      | Smith     | HR         | 60000  |\n",
        "| 2   | Bob        | Johnson   | IT         | 80000  |\n",
        "| 3   | Charlie    | Lee       | Sales      | 55000  |\n",
        "| 4   | David      | Kim       | HR         | 75000  |\n",
        "| 5   | Eva        | Brown     | IT         | 65000  |\n",
        "| 6   | Frank      | Wilson    | Sales      | 70000  |\n",
        "| 7   | Grace      | Taylor    | HR         | 62000  |\n",
        "| 8   | Henry      | Anderson  | IT         | 77000  |\n",
        "| 9   | Irene      | Thomas    | Sales      | 53000  |\n",
        "| 10  | Jack       | White     | HR         | 58000  |\n",
        "\n",
        "\n",
        "\n",
        "```sql\n",
        "-- Skipping rows\n",
        "p = \"\"\"\n",
        "\n",
        "SELECT * \n",
        "FROM \n",
        "  employees \n",
        "LIMIT 10 \n",
        "OFFSET 5;\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "| id  | first_name | last_name | department | salary |\n",
        "|-----|------------|-----------|------------|--------|\n",
        "| 6   | Frank      | Wilson    | Sales      | 70000  |\n",
        "| 7   | Grace      | Taylor    | HR         | 62000  |\n",
        "| 8   | Henry      | Anderson  | IT         | 77000  |\n",
        "| 9   | Irene      | Thomas    | Sales      | 53000  |\n",
        "| 10  | Jack       | White     | HR         | 58000  |\n",
        "| 11  | Karen      | Harris    | IT         | 69000  |\n",
        "| 12  | Leo        | Martin    | Sales      | 50000  |\n",
        "| 13  | Mia        | Jackson   | HR         | 64000  |\n",
        "| 14  | Noah       | Lee       | IT         | 72000  |\n",
        "| 15  | Olivia     | Perez     | Sales      | 68000  |\n",
        "\n",
        "\n",
        "### ORDER BY\n",
        "\n",
        "The `ORDER BY` clause sorts the result set.\n",
        "\n",
        "```sql\n",
        "-- Sorting the result set by salary in ascending order\n",
        "p = \"\"\"\n",
        "\n",
        "SELECT * \n",
        "FROM  \n",
        "  employees \n",
        "ORDER BY \n",
        "  salary;\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "| id  | first_name | last_name | department | salary |\n",
        "|-----|------------|-----------|------------|--------|\n",
        "| 12  | Leo        | Martin    | Sales      | 50000  |\n",
        "| 9   | Irene      | Thomas    | Sales      | 53000  |\n",
        "| 3   | Charlie    | Lee       | Sales      | 55000  |\n",
        "| 10  | Jack       | White     | HR         | 58000  |\n",
        "| 1   | Alice      | Smith     | HR         | 60000  |\n",
        "| 19  | Sam        | Green     | HR         | 63000  |\n",
        "| 7   | Grace      | Taylor    | HR         | 62000  |\n",
        "| 13  | Mia        | Jackson   | HR         | 64000  |\n",
        "| 5   | Eva        | Brown     | IT         | 65000  |\n",
        "| 11  | Karen      | Harris    | IT         | 69000  |\n",
        "| 18  | Rachel     | Scott     | Sales      | 57000  |\n",
        "| 15  | Olivia     | Perez     | Sales      | 68000  |\n",
        "| 6   | Frank      | Wilson    | Sales      | 70000  |\n",
        "| 14  | Noah       | Lee       | IT         | 72000  |\n",
        "| 17  | Quinn      | King      | IT         | 76000  |\n",
        "| 8   | Henry      | Anderson  | IT         | 77000  |\n",
        "| 4   | David      | Kim       | HR         | 75000  |\n",
        "| 2   | Bob        | Johnson   | IT         | 80000  |\n",
        "| 20  | Tina       | Adams     | IT         | 81000  |\n",
        "| 16  | Paul       | Young     | HR         | 61000  |\n",
        "\n",
        "\n",
        "```sql\n",
        "-- Sorting in descending order\n",
        "p = \"\"\"\n",
        "\n",
        "SELECT * \n",
        "FROM \n",
        "  employees \n",
        "ORDER BY \n",
        "  salary DESC;\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "| id  | first_name | last_name | department | salary |\n",
        "|-----|------------|-----------|------------|--------|\n",
        "| 20  | Tina       | Adams     | IT         | 81000  |\n",
        "| 2   | Bob        | Johnson   | IT         | 80000  |\n",
        "| 8   | Henry      | Anderson  | IT         | 77000  |\n",
        "| 17  | Quinn      | King      | IT         | 76000  |\n",
        "| 4   | David      | Kim       | HR         | 75000  |\n",
        "| 14  | Noah       | Lee       | IT         | 72000  |\n",
        "| 6   | Frank      | Wilson    | Sales      | 70000  |\n",
        "| 15  | Olivia     | Perez     | Sales      | 68000  |\n",
        "| 11  | Karen      | Harris    | IT         | 69000  |\n",
        "| 5   | Eva        | Brown     | IT         | 65000  |\n",
        "| 13  | Mia        | Jackson   | HR         | 64000  |\n",
        "| 19  | Sam        | Green     | HR         | 63000  |\n",
        "| 7   | Grace      | Taylor    | HR         | 62000  |\n",
        "| 16  | Paul       | Young     | HR         | 61000  |\n",
        "| 1   | Alice      | Smith     | HR         | 60000  |\n",
        "| 10  | Jack       | White     | HR         | 58000  |\n",
        "| 3   | Charlie    | Lee       | Sales      | 55000  |\n",
        "| 9   | Irene      | Thomas    | Sales      | 53000  |\n",
        "| 18  | Rachel     | Scott     | Sales      | 57000  |\n",
        "| 12  | Leo        | Martin    | Sales      | 50000  |\n",
        "\n",
        "\n",
        "### AND, OR, NOT\n",
        "\n",
        "Logical operators `filter` records based on multiple conditions.\n",
        "\n",
        "```sql\n",
        "-- Using AND, OR, NOT operators\n",
        "p = \"\"\"\n",
        "\n",
        "SELECT * \n",
        "FROM \n",
        "  employees \n",
        "WHERE \n",
        "  department = 'Sales' AND salary > 50000;\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "| id  | first_name | last_name | department | salary |\n",
        "|-----|------------|-----------|------------|--------|\n",
        "| 6   | Frank      | Wilson    | Sales      | 70000  |\n",
        "| 15  | Olivia     | Perez     | Sales      | 68000  |\n",
        "| 18  | Rachel     | Scott     | Sales      | 57000  |\n",
        "\n",
        "\n",
        "\n",
        "### Numeric Operations\n",
        "\n",
        "Perform `arithmetic` operations in SQL.\n",
        "\n",
        "```sql\n",
        "-- Calculating a new column\n",
        "p = \"\"\"\n",
        "\n",
        "SELECT \n",
        "  first_name, \n",
        "  last_name, \n",
        "  salary, \n",
        "  salary * 1.1 AS new_salary \n",
        "FROM \n",
        "  employees;\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "| first_name | last_name | salary | new_salary |\n",
        "|------------|-----------|--------|------------|\n",
        "| Alice      | Smith     | 60000  | 66000.0    |\n",
        "| Bob        | Johnson   | 80000  | 88000.0    |\n",
        "| Charlie    | Lee       | 55000  | 60500.0    |\n",
        "| David      | Kim       | 75000  | 82500.0    |\n",
        "| Eva        | Brown     | 65000  | 71500.0    |\n",
        "| Frank      | Wilson    | 70000  | 77000.0    |\n",
        "| Grace      | Taylor    | 62000  | 68200.0    |\n",
        "| Henry      | Anderson  | 77000  | 84700.0    |\n",
        "| Irene      | Thomas    | 53000  | 58300.0    |\n",
        "| Jack       | White     | 58000  | 63800.0    |\n",
        "| Karen      | Harris    | 69000  | 75900.0    |\n",
        "| Leo        | Martin    | 50000  | 55000.0    |\n",
        "| Mia        | Jackson   | 64000  | 70400.0    |\n",
        "| Noah       | Lee       | 72000  | 79200.0    |\n",
        "| Olivia     | Perez     | 68000  | 74800.0    |\n",
        "| Paul       | Young     | 61000  | 67100.0    |\n",
        "| Quinn      | King      | 76000  | 83600.0    |\n",
        "| Rachel     | Scott     | 57000  | 62700.0    |\n",
        "| Sam        | Green     | 63000  | 69300.0    |\n",
        "| Tina       | Adams     | 81000  | 89100.0    |\n",
        "\n",
        "\n",
        "\n",
        "### LIKE and NOT LIKE\n",
        "\n",
        "Pattern matching using `LIKE`.\n",
        "\n",
        "```sql\n",
        "-- Pattern matching\n",
        "p = \"\"\"\n",
        "\n",
        "SELECT * \n",
        "FROM \n",
        "  employees \n",
        "WHERE \n",
        "  last_name \n",
        "LIKE 'S%';\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "| id  | first_name | last_name | department | salary |\n",
        "|-----|------------|-----------|------------|--------|\n",
        "| 1   | Alice      | Smith     | HR         | 60000  |\n",
        "| 18  | Rachel     | Scott     | Sales      | 57000  |\n",
        "\n",
        "\n",
        "\n",
        "### BETWEEN\n",
        "\n",
        "Range filtering using `BETWEEN`.\n",
        "\n",
        "```sql\n",
        "-- Filtering within a range\n",
        "p = \"\"\"\n",
        "\n",
        "SELECT * \n",
        "FROM \n",
        "  employees \n",
        "WHERE \n",
        "  salary BETWEEN 40000 AND 60000;\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "| id  | first_name | last_name | department | salary |\n",
        "|-----|------------|-----------|------------|--------|\n",
        "| 12  | Leo        | Martin    | Sales      | 50000  |\n",
        "| 3   | Charlie    | Lee       | Sales      | 55000  |\n",
        "| 9   | Irene      | Thomas    | Sales      | 53000  |\n",
        "| 10  | Jack       | White     | HR         | 58000  |\n",
        "| 1   | Alice      | Smith     | HR         | 60000  |\n",
        "\n",
        "\n",
        "\n",
        "### OFFSET\n",
        "\n",
        "`Skip` a specific number of rows before starting to return rows.\n",
        "\n",
        "```sql\n",
        "-- Skipping the first 5 rows\n",
        "p = \"\"\"\n",
        "\n",
        "SELECT * \n",
        "FROM \n",
        "  employees \n",
        "OFFSET 5;\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "| id  | first_name | last_name | department | salary |\n",
        "|-----|------------|-----------|------------|--------|\n",
        "| 6   | Frank      | Wilson    | Sales      | 70000  |\n",
        "| 7   | Grace      | Taylor    | HR         | 62000  |\n",
        "| 8   | Henry      | Anderson  | IT         | 77000  |\n",
        "| 9   | Irene      | Thomas    | Sales      | 53000  |\n",
        "| 10  | Jack       | White     | HR         | 58000  |\n",
        "| 11  | Karen      | Harris    | IT         | 69000  |\n",
        "| 12  | Leo        | Martin    | Sales      | 50000  |\n",
        "| 13  | Mia        | Jackson   | HR         | 64000  |\n",
        "| 14  | Noah       | Lee       | IT         | 72000  |\n",
        "| 15  | Olivia     | Perez     | Sales      | 68000  |\n",
        "| 16  | Paul       | Young     | HR         | 61000  |\n",
        "| 17  | Quinn      | King      | IT         | 76000  |\n",
        "| 18  | Rachel     | Scott     | Sales      | 57000  |\n",
        "| 19  | Sam        | Green     | HR         | 63000  |\n",
        "| 20  | Tina       | Adams     | IT         | 81000  |\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Intermediate SQL Concepts\n",
        "\n",
        "\n",
        "### Joins\n",
        "\n",
        "**Table: employees**\n",
        "\n",
        "| id  | first_name | last_name | department_id | salary |\n",
        "|-----|------------|-----------|---------------|--------|\n",
        "| 1   | Alice      | Smith     | 1             | 60000  |\n",
        "| 2   | Bob        | Johnson   | 2             | 80000  |\n",
        "| 3   | Charlie    | Lee       | 3             | 55000  |\n",
        "| 4   | David      | Kim       | 1             | 75000  |\n",
        "| 5   | Eva        | Brown     | 2             | 65000  |\n",
        "| 6   | Frank      | Wilson    | 3             | 70000  |\n",
        "| 7   | Grace      | Taylor    | 1             | 62000  |\n",
        "| 8   | Henry      | Anderson  | 2             | 77000  |\n",
        "| 9   | Irene      | Thomas    | 3             | 53000  |\n",
        "| 10  | Jack       | White     | 1             | 58000  |\n",
        "| 11  | Karen      | Harris    | 2             | 69000  |\n",
        "| 12  | Leo        | Martin    | 3             | 50000  |\n",
        "| 13  | Mia        | Jackson   | 1             | 64000  |\n",
        "| 14  | Noah       | Lee       | 2             | 72000  |\n",
        "| 15  | Olivia     | Perez     | 3             | 68000  |\n",
        "| 16  | Paul       | Young     | 1             | 61000  |\n",
        "| 17  | Quinn      | King      | 2             | 76000  |\n",
        "| 18  | Rachel     | Scott     | 3             | 57000  |\n",
        "| 19  | Sam        | Green     | 1             | 63000  |\n",
        "| 20  | Tina       | Adams     | 2             | 81000  |\n",
        "\n",
        "\n",
        "**Table: departments**\n",
        "\n",
        "| department_id | department_name |\n",
        "|---------------|-----------------|\n",
        "| 1             | HR              |\n",
        "| 2             | IT              |\n",
        "| 3             | Sales           |\n",
        "\n",
        "\n",
        "Combine rows from two or more tables based on a related column.\n",
        "\n",
        "```sql\n",
        "-- Inner join example\n",
        "p = \"\"\"\n",
        "\n",
        "SELECT \n",
        "  employees.first_name, \n",
        "    employees.last_name, \n",
        "    departments.department_name\n",
        "FROM \n",
        "  employees\n",
        "INNER JOIN \n",
        "  departments ON employees.department_id = departments.department_id;\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "| first_name | last_name | department_name |\n",
        "|------------|-----------|-----------------|\n",
        "| Alice      | Smith     | HR              |\n",
        "| David      | Kim       | HR              |\n",
        "| Grace      | Taylor    | HR              |\n",
        "| Jack       | White     | HR              |\n",
        "| Mia        | Jackson   | HR              |\n",
        "| Paul       | Young     | HR              |\n",
        "| Sam        | Green     | HR              |\n",
        "| Bob        | Johnson   | IT              |\n",
        "| Eva        | Brown     | IT              |\n",
        "| Henry      | Anderson  | IT              |\n",
        "| Karen      | Harris    | IT              |\n",
        "| Noah       | Lee       | IT              |\n",
        "| Quinn      | King      | IT              |\n",
        "| Tina       | Adams     | IT              |\n",
        "| Charlie    | Lee       | Sales           |\n",
        "| Frank      | Wilson    | Sales           |\n",
        "| Irene      | Thomas    | Sales           |\n",
        "| Leo        | Martin    | Sales           |\n",
        "| Olivia     | Perez     | Sales           |\n",
        "| Rachel     | Scott     | Sales           |\n",
        "\n",
        "\n",
        "### CAST\n",
        "\n",
        "Convert `data` from one type to another.\n",
        "\n",
        "```sql\n",
        "-- Casting a column\n",
        "p = \"\"\"\n",
        "\n",
        "SELECT \n",
        "  CAST(salary AS DECIMAL(10, 2)) \n",
        "FROM \n",
        "  employees;\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "| salary   |\n",
        "|----------|\n",
        "| 60000.00 |\n",
        "| 80000.00 |\n",
        "| 55000.00 |\n",
        "| 75000.00 |\n",
        "| 65000.00 |\n",
        "| 70000.00 |\n",
        "| 62000.00 |\n",
        "| 77000.00 |\n",
        "| 53000.00 |\n",
        "| 58000.00 |\n",
        "| 69000.00 |\n",
        "| 50000.00 |\n",
        "| 64000.00 |\n",
        "| 72000.00 |\n",
        "| 68000.00 |\n",
        "| 61000.00 |\n",
        "| 76000.00 |\n",
        "| 57000.00 |\n",
        "| 63000.00 |\n",
        "| 81000.00 |\n",
        "\n",
        "\n",
        "### Aggregations\n",
        "\n",
        "Perform `calculations` on a set of values.\n",
        "\n",
        "```sql\n",
        "-- Using aggregation functions\n",
        "p = \"\"\"\n",
        "\n",
        "SELECT \n",
        "  department_id, \n",
        "  COUNT(employee_id) AS num_employees\n",
        "FROM \n",
        "  employees\n",
        "GROUP BY \n",
        "  department_id;\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "| department_id | num_employees |\n",
        "|---------------|---------------|\n",
        "| 1             | 7             |\n",
        "| 2             | 7             |\n",
        "| 3             | 6             |\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "### GROUP BY and HAVING\n",
        "\n",
        "`Group` rows that have the same values and `filter` groups.\n",
        "\n",
        "```sql\n",
        "-- Grouping rows and filtering groups\n",
        "p = \"\"\"\n",
        "SELECT \n",
        "  department_id,\n",
        "  COUNT(employee_id) AS num_employees\n",
        "FROM \n",
        "  employees\n",
        "GROUP BY \n",
        "  department_id\n",
        "HAVING COUNT(employee_id) > 5;\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "| department_id | num_employees |\n",
        "|---------------|---------------|\n",
        "| 1             | 7             |\n",
        "| 2             | 7             |\n",
        "| 3             | 6             |\n",
        "\n",
        "\n",
        "\n",
        "### UNION, INTERSECT, MINUS\n",
        "\n",
        "Combine result sets\n",
        "\n",
        "**Table: managers**\n",
        "\n",
        "| manager_id | first_name | last_name |\n",
        "|------------|------------|-----------|\n",
        "| 1          | Michael    | Brown     |\n",
        "| 2          | Sarah      | Johnson   |\n",
        "| 3          | John       | Lee       |\n",
        "\n",
        "\n",
        "```sql\n",
        "-- Union example\n",
        "p = \"\"\"\n",
        "SELECT \n",
        "  first_name \n",
        "FROM \n",
        "  employees\n",
        "UNION\n",
        "\n",
        "SELECT \n",
        "  first_name\n",
        "FROM\n",
        "   managers;\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "| first_name |\n",
        "|------------|\n",
        "| Alice      |\n",
        "| Bob        |\n",
        "| Charlie    |\n",
        "| David      |\n",
        "| Eva        |\n",
        "| Frank      |\n",
        "| Grace      |\n",
        "| Henry      |\n",
        "| Irene      |\n",
        "| Jack       |\n",
        "| Karen      |\n",
        "| Leo        |\n",
        "| Mia        |\n",
        "| Noah       |\n",
        "| Olivia     |\n",
        "| Paul       |\n",
        "| Quinn      |\n",
        "| Rachel     |\n",
        "| Sam        |\n",
        "| Tina       |\n",
        "| Michael    |\n",
        "| Sarah      |\n",
        "| John       |\n",
        "\n",
        "\n",
        "\n",
        "### POSITION\n",
        "\n",
        "`Find` the position of a `substring`.\n",
        "\n",
        "```sql\n",
        "-- Finding substring position\n",
        "p = \"\"\"\n",
        "SELECT \n",
        "  POSITION('e' IN first_name) \n",
        "FROM \n",
        "  employees;\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "| position |\n",
        "|----------|\n",
        "| 0        |\n",
        "| 0        |\n",
        "| 4        |\n",
        "| 0        |\n",
        "| 0        |\n",
        "| 2        |\n",
        "| 0        |\n",
        "| 3        |\n",
        "| 2        |\n",
        "| 0        |\n",
        "| 0        |\n",
        "| 3        |\n",
        "| 0        |\n",
        "| 0        |\n",
        "| 0        |\n",
        "| 0        |\n",
        "| 0        |\n",
        "| 2        |\n",
        "| 0        |\n",
        "| 0        |\n",
        "\n",
        "\n",
        "\n",
        "### CASE\n",
        "\n",
        "`Conditional` logic in `SQL.\n",
        "\n",
        "```sql\n",
        "-- Using CASE statements\n",
        "p = \"\"\"\n",
        "SELECT \n",
        "  first_name, \n",
        "  last_name,\n",
        "       CASE \n",
        "         WHEN salary > 60000 THEN 'High'\n",
        "         WHEN salary BETWEEN 40000 AND 60000 THEN 'Medium'\n",
        "         ELSE 'Low'\n",
        "       END AS salary_category\n",
        "FROM \n",
        "  employees;\n",
        "\"\"\"\n",
        "\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "| first_name | last_name | salary_category |\n",
        "|------------|-----------|------------------|\n",
        "| Alice      | Smith     | Medium           |\n",
        "| Bob        | Johnson   | High             |\n",
        "| Charlie    | Lee       | Medium           |\n",
        "| David      | Kim       | High             |\n",
        "| Eva        | Brown     | Medium           |\n",
        "| Frank      | Wilson    | High             |\n",
        "| Grace      | Taylor    | Medium           |\n",
        "| Henry      | Anderson  | High             |\n",
        "| Irene      | Thomas    | Medium           |\n",
        "| Jack       | White     | Medium           |\n",
        "| Karen      | Harris    | High             |\n",
        "| Leo        | Martin    | Medium           |\n",
        "| Mia        | Jackson   | Medium           |\n",
        "| Noah       | Lee       | High             |\n",
        "| Olivia     | Perez     | High             |\n",
        "| Paul       | Young     | Medium           |\n",
        "| Quinn      | King      | High             |\n",
        "| Rachel     | Scott     | Medium           |\n",
        "| Sam        | Green     | Medium           |\n",
        "| Tina       | Adams     | High             |\n",
        "\n",
        "\n",
        "\n",
        "# Joins\n",
        "\n",
        "## Introduction\n",
        "\n",
        "It's rare that a data analysis involves only a single data frame. Typically you have many data frames, and you must *join* them together to answer the questions that you're interested in.\n",
        "\n",
        "**pandas** has a really rich set of options for combining one or more data frames, with the two most important being concatenate and merge. Some of the examples in this chapter show you how to join a pair of data frames. Fortunately this is enough, since you can combine three data frames by combining two pairs.\n"
      ],
      "id": "3a59b6c0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# remove cell\n",
        "import matplotlib_inline.backend_inline\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Plot settings\n",
        "plt.style.use(\"https://github.com/aeturrell/python4DS/raw/main/plot_style.txt\")\n",
        "matplotlib_inline.backend_inline.set_matplotlib_formats(\"svg\")"
      ],
      "id": "7adb4971",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Prerequisites\n",
        "\n",
        "This chapter will use the **pandas** data analysis package.\n",
        "\n",
        "## Concatenate\n",
        "\n",
        "If you have two or more data frames with the same index or the same columns, you can glue them together into a single data frame using `pd.concat()`.\n",
        "\n",
        "![](https://pandas.pydata.org/docs/_images/08_concat_row.svg)\n",
        "\n",
        "For the same columns, pass `axis=0` to glue the index together; for the same index, pass `axis=1` to glue the columns together. The concatenate function will typically be used on a list of data frames.\n",
        "\n",
        "If you want to track where the original data came from in the final data frame, use the `keys` keyword.\n",
        "\n",
        "Here's an example using data on two different states' populations that also makes uses of the `keys` option:\n"
      ],
      "id": "57685e26"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import urllib.request\n",
        "\n",
        "base_url = \"http://www.stata-press.com/data/r14/\"\n",
        "state_codes = [\"ca\", \"il\"]\n",
        "end_url = \"pop.dta\"\n",
        "headers = {'User-Agent': 'Mozilla/5.0'}\n",
        "\n",
        "def fetch_data(url):\n",
        "    req = urllib.request.Request(url, headers=headers)\n",
        "    with urllib.request.urlopen(req) as response:\n",
        "        return pd.read_stata(response)\n",
        "\n",
        "# This grabs the two data frames, one for each state\n",
        "list_of_state_dfs = [fetch_data(base_url + state + end_url) for state in state_codes]\n",
        "\n",
        "# Show example of first entry in list of data frames\n",
        "print(list_of_state_dfs[0])"
      ],
      "id": "e00d662f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Concatenate the list of data frames\n",
        "df = pd.concat(list_of_state_dfs, keys=state_codes, axis=0)"
      ],
      "id": "517e4262",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Note that the `keys` argument is optional, but is useful for keeping track of origin data frames within the merged data frame.\n",
        "\n",
        "### Exercise\n",
        "Concatenate the follow two data frames:\n",
        "\n",
        "```Python\n",
        "df1 = pd.DataFrame([['a', 1], ['b', 2]],\n",
        "                   columns=['letter', 'number'])\n",
        "\n",
        "df2 = pd.DataFrame([['c', 3], ['d', 4]],\n",
        "                   columns=['letter', 'number'])\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "### Merge\n",
        "\n",
        "There are so many options for merging data frames using `pd.merge(left, right, on=..., how=...` that we won't be able to cover them all here. The most important features are: the two data frames to be merged, what variables (aka keys) to merge on (and these can be indexes) via `on=`, and *how* to do the merge (eg left, right, outer, inner) via `how=`. This diagram shows an example of a merge using keys from the left-hand data frame:\n",
        "\n",
        "![](https://pandas.pydata.org/docs/_images/08_merge_left.svg)\n",
        "\n",
        "The `how=` keyword works in the following ways:\n",
        "- `how='left'` uses keys from the left data frame only to merge.\n",
        "- `how='right'` uses keys from the right data frame only to merge.\n",
        "- `how='inner'` uses keys that appear in both data frames to merge.\n",
        "- `how='outer'` uses the cartesian product of keys in both data frames to merge on.\n",
        "\n",
        "Let's see examples of some of these:\n"
      ],
      "id": "b3bb7ec3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "left = pd.DataFrame(\n",
        "    {\n",
        "        \"key1\": [\"K0\", \"K0\", \"K1\", \"K2\"],\n",
        "        \"key2\": [\"K0\", \"K1\", \"K0\", \"K1\"],\n",
        "        \"A\": [\"A0\", \"A1\", \"A2\", \"A3\"],\n",
        "        \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"],\n",
        "    }\n",
        ")\n",
        "right = pd.DataFrame(\n",
        "    {\n",
        "        \"key1\": [\"K0\", \"K1\", \"K1\", \"K2\"],\n",
        "        \"key2\": [\"K0\", \"K0\", \"K0\", \"K0\"],\n",
        "        \"C\": [\"C0\", \"C1\", \"C2\", \"C3\"],\n",
        "        \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"],\n",
        "    }\n",
        ")\n",
        "# Right merge\n",
        "pd.merge(left, right, on=[\"key1\", \"key2\"], how=\"right\")"
      ],
      "id": "e50e1ceb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Note that the key combination of K2 and K0 did not exist in the left-hand data frame, and so its entries in the final data frame are NaNs. But it *does* have entries because we chose the keys from the right-hand data frame.\n",
        "\n",
        "What about an inner merge?"
      ],
      "id": "da6d02d1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pd.merge(left, right, on=[\"key1\", \"key2\"], how=\"inner\")"
      ],
      "id": "7315ca26",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now we see that the combination K2 and K0 are excluded because they didn't exist in the overlap of keys in both data frames.\n",
        "\n",
        "Finally, let's take a look at an outer merge that comes with some extra info via the `indicator` keyword:"
      ],
      "id": "a54b2d83"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pd.merge(left, right, on=[\"key1\", \"key2\"], how=\"outer\", indicator=True)"
      ],
      "id": "85f6c11e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now we can see that the products of all key combinations are here. The `indicator=True` option has caused an extra column to be added, called '_merge', that tells us which data frame the keys on that row came from.\n",
        "\n",
        "### Exercise\n",
        "\n",
        "Merge the following two data frames using the `left_on` and `right_on` keyword arguments to specify a join on `lkey` and `rkey` respectively:\n",
        "\n",
        "```python\n",
        "df1 = pd.DataFrame({'lkey': ['foo', 'bar', 'baz', 'foo'],\n",
        "                    'value': [1, 2, 3, 5]})\n",
        "df2 = pd.DataFrame({'rkey': ['foo', 'bar', 'baz', 'foo'],\n",
        "                    'value': [5, 6, 7, 8]})\n",
        "```\n",
        "\n",
        "\n",
        "### Exercise\n",
        "\n",
        "Merge the following two data frames on `\"a\"` using `how=\"left\"` as a keyword argument:\n",
        "\n",
        "```python\n",
        "df1 = pd.DataFrame({'a': ['foo', 'bar'], 'b': [1, 2]})\n",
        "df2 = pd.DataFrame({'a': ['foo', 'baz'], 'c': [3, 4]})\n",
        "```\n",
        "\n",
        "What do you notice about the position `.loc[1, \"c\"]` in the merged data frame? \n",
        "\n",
        "\n",
        "For more on the options for merging, see **pandas**' comprehensive [merging documentation](https://pandas.pydata.org/docs/user_guide/merging.html#database-style-dataframe-or-named-series-joining-merging).\n",
        "\n",
        "\n",
        "\n",
        "## Introduction to SQL Joins\n",
        "\n",
        "SQL joins are used to combine rows from two or more tables based on a related column between them. Understanding joins is crucial for effective data retrieval and manipulation. This section will cover the four main types of joins: INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL JOIN, using visual aids and code snippets with a fake data frame.\n",
        "\n",
        "## Types of Joins\n",
        "\n",
        "### INNER JOIN\n",
        "\n",
        "An INNER JOIN returns only the rows that have matching values in both tables.\n",
        "\n",
        "![INNER JOIN](Images/Inner_JOIN.png)\n",
        "\n",
        "```sql\n",
        "-- Inner join example\n",
        "p = \"\"\"\n",
        "SELECT \n",
        "  A.id, \n",
        "  A.name, \n",
        "  B.order_id\n",
        "FROM \n",
        "  Customers A\n",
        "INNER JOIN \n",
        "  Orders B ON A.id = B.customer_id;\n",
        "\"\"\"\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "### LEFT JOIN\n",
        "\n",
        "A LEFT JOIN returns all the rows from the left table and the matched rows from the right table. If no match is found, NULL values are returned for columns from the right table.\n",
        "\n",
        "![LEFT JOIN](Images/Left_JOIN.png)\n",
        "\n",
        "```sql\n",
        "-- Left join example\n",
        "p = \"\"\"\n",
        "SELECT \n",
        "  A.id, \n",
        "  A.name, \n",
        "  B.order_id\n",
        "FROM \n",
        "  Customers A\n",
        "LEFT JOIN \n",
        "  Orders B ON A.id = B.customer_id;\n",
        "\"\"\"\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "\n",
        "### RIGHT JOIN\n",
        "\n",
        "A RIGHT JOIN returns all the rows from the right table and the matched rows from the left table. If no match is found, NULL values are returned for columns from the left table.\n",
        "\n",
        "![RIGHT JOIN](Images/Right_JOIN.png)\n",
        "\n",
        "```sql\n",
        "p = \"\"\"\n",
        "SELECT \n",
        "  A.id, \n",
        "  A.name, \n",
        "  B.order_id\n",
        "FROM \n",
        "  Customers A\n",
        "RIGHT JOIN \n",
        "  Orders B ON A.id = B.customer_id;\n",
        "\"\"\"\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "\n",
        "### FULL JOIN\n",
        "\n",
        "A FULL JOIN returns all the rows when there is a match in either left or right table. Rows without a match in one of the tables will contain NULL values for columns from that table.\n",
        "\n",
        "![FULL JOIN](Images/full-join.png)\n",
        "\n",
        "```sql\n",
        "-- Full join example\n",
        "p = \"\"\"\n",
        "SELECT \n",
        "  A.id, \n",
        "  A.name, \n",
        "  B.order_id\n",
        "FROM \n",
        "  Customers A\n",
        "FULL JOIN \n",
        "  Orders B ON A.id = B.customer_id;\n",
        "\"\"\"\n",
        "pd.read_sql_query(p, con)\n",
        "```\n",
        "\n",
        "\n",
        "## Example Data Frames\n",
        "\n",
        "To illustrate these joins, let's consider two fake data frames: `Customers` and `Orders`."
      ],
      "id": "0477c2ff"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Creating a fake data frame for Customers\n",
        "customers = pd.DataFrame({\n",
        "    'id': [1, 2, 3, 4],\n",
        "    'name': ['Alice', 'Bob', 'Charlie', 'David']\n",
        "})\n",
        "\n",
        "# Creating a fake data frame for Orders\n",
        "orders = pd.DataFrame({\n",
        "    'order_id': [101, 102, 103, 104],\n",
        "    'customer_id': [1, 2, 2, 4]\n",
        "})\n",
        "\n",
        "# Display the data frames\n",
        "print(\"Customers Data Frame\")\n",
        "print(customers)"
      ],
      "id": "d7520f5f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "print(\"Orders Data Frame\")\n",
        "print(orders)"
      ],
      "id": "09c61791",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Conclusion\n",
        "\n",
        "SQL is an indispensable tool for anyone working with data. Its ability to manage, manipulate, and integrate data makes it essential for data analysis and decision-making. The examples provided in this chapter illustrate some of the key operations and techniques used in SQL, highlighting its importance in the field of data science.\n"
      ],
      "id": "0a4a0c21"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\drp36\\AppData\\Local\\Programs\\Python\\Python312\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
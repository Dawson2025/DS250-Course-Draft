---
title: "Data Visualization with Plotly Express"
date: 2020-05-01T11:02:05+06:00
lastmod: 2020-09-15T10:42:26+06:00
weight: 4
draft: false
# search related keywords
keywords: [""]
---

### Introduction

> “The simple graph has brought more information to the data analyst’s mind than any other device.” — John Tukey

This chapter introudces data visualization with the Plotly Express library.  We briefly discus the **grammar of graphics** which is a useful paradigm for understanding the fundamentals of building graphs.  Then we introudce the basics of Plotly Express and provide resources for further development.


### Prerequisites

[Plotly Express Install](/Setup/plotly_setup.qmd)

For a slightly more interesting introduction, let's look at the classic iris dataset built into the plotly.express data library.  This dataset contains measurements on 3 species of irises.  

First, load the data by calling .data from the `px` library as follows:

```{python}
import plotly.express as px
data = px.data.iris()
data.head()
```


To explore the relationship between sepal width and sepal length, we can start with a basic scatterplot.    


```{python}
px.scatter(data,  x="sepal_width", y="sepal_length", title = "The relationship between sepal width and sepal length")
```


When all species are lumped together in this scatterplot it doesn't look like there is much of a relationship between the sepal width and sepal length.  We can improve our visualiztion by coloring the points based on species.


```{python}
px.scatter(data,  x="sepal_width", y="sepal_length", color = "species", title = "The relationship between sepal width and sepal length")
```


Notice that `px` has default hover labels related to x, y, and color.  If we would like to modify what information is displayed when we hover over a point, we can add a "hover_data" option.


```{python}
px.scatter(data,  x="sepal_width", y="sepal_length", color = "species", hover_data=["species", "petal_width"], title = "The relationship between sepal width and sepal length")
```


As we increase the complexity of a visualization, our code starts to become less readable.  Readable code is a magnificent skill to master.  So a better way to express the same code as above is:


```{python}
px.scatter(data,
    x="sepal_width", 
    y="sepal_length", 
    color = "species", 
    hover_data=["species", "petal_width"], 
    title = "The relationship between sepal width and sepal length"
)
```

We can also easily change the shape and size of the points in a scatterplot. 

```{python}
px.scatter(data,
    x="sepal_width", 
    y="sepal_length", 
    color = "species", 
    size = "petal_length",
    symbol = "species",
    hover_data=["species", "petal_width"], 
    title = "The relationship between sepal width and sepal length"
)
```

Now that's just silly! But hopefully the basic syntax for using `px` makes sense.  

### Making Plotly.Express More Presentable

In this section, we look at how to customize charts to be more informative and presentable.  For example, column names in a dataset are rarely a good idea to present to someone not as intimately familiar with the data as you.  We may also wish to highlight certain points, or draw attention to areas on a graph.  

To begin, let's return to a reasonable visualization of the iris data.  We will start by naming our `px` chart object "fig" and changing the X and Y axis labels.  

There are 2 ways to change labels.  The more direct way is to include a "labels" dictionary in the figure inputs.  The key-value pairs in this list are first, the variable name, and second, the desired label.


```{python}

fig = px.scatter(data,
    x="sepal_width", 
    y="sepal_length", 
    color = "species", 
    symbol = "species",
    labels={"sepal_width": "Sepal Width", "sepal_length": "Sepal Length", "species": "Species"},
    hover_data=["species", "petal_width"], 
    title = "The relationship between sepal width and sepal length"
)

fig.show()
```

The next method makes the same adjustments but modifies the chart "post hoc".  Start with a very basic chart, "fig" and use the `.update.layout()` method to modify titles.

```{python}
fig = px.scatter(data,
    x="sepal_width", 
    y="sepal_length", 
    color = "species", 
    symbol = "species",
    hover_data=["species", "petal_width"], 
    title = "The relationship between sepal width and sepal length"
)

fig.update_layout(
    xaxis_title = "Sepal Width",
    yaxis_title = "Sepal Length",
    legend_title = "Species"
)

```

<br>
The 2 approaches above have the same outcome, but the latter example introduces a flexible `px` paradigm that can be extended to other chart additions and modifications.  For example, if we want to add a reference line to "fig", we can use the `.add_hline()` method.
<br>

```{python}

fig.add_hline(
    y = 7,
    line_dash = "dot",
    line_color = "black"
)

```


We can add several different shapes, including circles, lines or rectanges using the `.add_shape()` method.  This method specifies what type of shape to add to the graph given a set of coordinates (x0, x1, y0, y1).  ".add_shape()" can be used to draw reference lines as well, but still requires a all 4 coordinates.  


```{python}
# Adds a horizontal line
fig.add_shape(
    type = "circle",
    line_color = "green",
    line_width = 3,
    line_dash = "dot",
    opacity = 1,
    x0 = 3.7, x1=3.9,
    y0=7.6,y1=8
)

```


The code above introduces many of the `.add_shape()` features all at once, not all of which are necessary for every situation.  But hopefully this gives a flavor of what can be done.  

Notice also, that the `.add_` methods actually update `fig`.  No need to overwrite the original object or create a new chart object for each modification.  


```{python}
fig.show()
```

### Other `.add_`itions

There are several other useful "post hoc" graph modifications that we only mention in this chapter.  For further exploration, see [Plotly Express Styling](https://plotly.com/python/styling-plotly-express/).

Use `fig.add_annotation()` to add text with or without arrows pointing to specific locations.  Update axes by using `fig.update_yaxes()` or `fig.update_xaxes` which allows you to modify gridlines and add units of measure like "%" or "$".  `.add_vrect()` and `add_hrect()` allow you to highlight regions vertically or horizontally.  The possibilities are almost endless!

### Resources

This chapter has introudced the basics of `plotly.express`, but we have only looked at a scatterplot.  For links to further documentation and a whole gallery of `px` possibilities, see [Plotly Express in Python](https://plotly.com/python/plotly-express/).

